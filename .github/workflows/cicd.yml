# Workflow title
# 명시하지 않는 경우 파일의 경로가 타이틀이 된다.
name: CI/CD

# 이벤트
# develop 브랜치에 push나 pull request가 일어난 경우
on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

# 이벤트가 일어나면 해야할 작업들을 명시
jobs:
# Docker image build
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

   # application.yml 파일 생성
    - name: make application.yml
      run: 
        echo "${{ secrets.APPLICATION_YML }}" > ./api/src/main/resources/application.yml

   # gradlew 실행 권한 부여
    - run: chmod +x ./gradlew
    
   # 멀티 모듈 빌드
    - name: Build with Gradle
      run: ./gradlew :db:clean :api:clean :api:build -x test

   # Docker Login, image build, push
    - name : Docker Login, image build, push
      run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build --build-arg DEPENDENCY=build/dependency -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }} --platform linux/amd64 .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }}
  deploy:
    name: Deploy Docker Image to EC2
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: SSH into EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: 22
        script: |
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }}
          sudo docker stop ${{ secrets.PROJECT_NAME }}
          sudo docker rm ${{ secrets.PROJECT_NAME }}
          sudo docker run -d -p 443:443 --name ${{ secrets.PROJECT_NAME }} -v /etc/letsencrypt/live/api.minibnb.shop/keystore.p12:/app/ssl/keystore.p12 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }}
